// This is code that creates the database. In order to populate the database please use cocktail_data_utils.py 

********************************************

CREATE DATABASE cocktaildb;

USE cocktaildb;

CREATE TABLE cocktail_names (
    id VARCHAR(255) PRIMARY KEY,
    name VARCHAR(255)
);

CREATE TABLE ingredients (
    cocktail_id VARCHAR(255) PRIMARY KEY,
    ingredient1 VARCHAR(255),
    ingredient2 VARCHAR(255),
    ingredient3 VARCHAR(255),
    ingredient4 VARCHAR(255),
    ingredient5 VARCHAR(255),
    ingredient6 VARCHAR(255),
    ingredient7 VARCHAR(255),
    ingredient8 VARCHAR(255),
    ingredient9 VARCHAR(255),
    ingredient10 VARCHAR(255),
    ingredient11 VARCHAR(255),
    ingredient12 VARCHAR(255),
    ingredient13 VARCHAR(255),
    ingredient14 VARCHAR(255),
    ingredient15 VARCHAR(255)
);

CREATE TABLE instructions (
    cocktail_id VARCHAR(255) PRIMARY KEY,
    instructions TEXT
);

CREATE TABLE images (
    cocktail_id VARCHAR(255) PRIMARY KEY,
    image_url VARCHAR(255)
);

CREATE TABLE videos (
    cocktail_id VARCHAR(255) PRIMARY KEY,
    video_url VARCHAR(255)
);

CREATE TABLE drinks_information (
    id VARCHAR(255) PRIMARY KEY,
    category VARCHAR(255),
    type VARCHAR(255)
    strIBA VARCHAR(255),
    strTags VARCHAR(255),
    dateModified DATETIME
);

CREATE TABLE glass_type (
    cocktail_id VARCHAR(255),
    glass VARCHAR(255),
    PRIMARY KEY (cocktail_id, glass)
);

CREATE TABLE alcoholic_status (
    cocktail_id VARCHAR(255),
    status VARCHAR(255),
    PRIMARY KEY (cocktail_id, status)
);

// to create saved cocktails TABLE

CREATE TABLE saved_cocktails (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255),
);

CREATE TABLE measures (
    cocktail_id VARCHAR(255),
    measure1 VARCHAR(255),
    measure2 VARCHAR(255),
    measure3 VARCHAR(255),
    measure4 VARCHAR(255),
    measure5 VARCHAR(255),
    measure6 VARCHAR(255),
    measure7 VARCHAR(255),
    measure8 VARCHAR(255),
    measure9 VARCHAR(255),
    measure10 VARCHAR(255),
    measure11 VARCHAR(255),
    measure12 VARCHAR(255),
    measure13 VARCHAR(255),
    measure14 VARCHAR(255),
    measure15 VARCHAR(255),
    PRIMARY KEY (cocktail_id)
);


**********************************************

*****Below are the queries run to test the queries that were used in db_utils. *********



-- SELECT * FROM cocktail_names;
-- SELECT * FROM alcoholic_status;
-- SELECT * FROM glass_type;
-- SELECT * FROM drinks_information;
-- SELECT * FROM ingredients;

-- SELECT DISTINCT c.name
-- FROM cocktail_names c
-- JOIN ingredients i ON c.id = i.cocktail_id
-- WHERE i.ingredient1 IN ('vodka', 'orange juice')
--    OR i.ingredient2 IN ('vodka', 'orange juice')
--    OR i.ingredient3 IN ('vodka', 'orange juice')
--    -- ... (up to 11 conditions)
-- ORDER BY c.name;

-- SELECT c.name
-- FROM cocktail_names c
-- JOIN ingredients i ON c.id = i.cocktail_id
-- WHERE 'vodka' IN (i.ingredient1, i.ingredient2, i.ingredient3, i.ingredient4, i.ingredient5, 
--                   i.ingredient6, i.ingredient7, i.ingredient8, i.ingredient9, i.ingredient10, 
--                   i.ingredient11, i.ingredient12, i.ingredient13, i.ingredient14, i.ingredient15)
--   AND 'orange juice' IN (i.ingredient1, i.ingredient2, i.ingredient3, i.ingredient4, i.ingredient5, 
--                          i.ingredient6, i.ingredient7, i.ingredient8, i.ingredient9, i.ingredient10, 
--                          i.ingredient11, i.ingredient12, i.ingredient13, i.ingredient14, i.ingredient15)
-- ORDER BY c.name;


-- SELECT cn.name
-- FROM cocktail_names cn
-- JOIN ingredients ing ON cn.id = ing.cocktail_id
-- WHERE ('vodka' IN (ing.ingredient1, ing.ingredient2, ing.ingredient3, ing.ingredient4, ing.ingredient5, 
--                    ing.ingredient6, ing.ingredient7, ing.ingredient8, ing.ingredient9, ing.ingredient10, 
--                    ing.ingredient11, ing.ingredient12, ing.ingredient13, ing.ingredient14, ing.ingredient15)
--    AND 'orange juice' IN (ing.ingredient1, ing.ingredient2, ing.ingredient3, ing.ingredient4, ing.ingredient5, 
--                           ing.ingredient6, ing.ingredient7, ing.ingredient8, ing.ingredient9, ing.ingredient10, 
--                           ing.ingredient11, ing.ingredient12, ing.ingredient13, ing.ingredient14, ing.ingredient15)
-- 	AND 'peach schnapps' IN (ing.ingredient1, ing.ingredient2, ing.ingredient3, ing.ingredient4, ing.ingredient5, 
--                           ing.ingredient6, ing.ingredient7, ing.ingredient8, ing.ingredient9, ing.ingredient10, 
--                           ing.ingredient11, ing.ingredient12, ing.ingredient13, ing.ingredient14, ing.ingredient15)) 
-- GROUP BY cn.name
-- ORDER BY cn.name;

-- SELECT *
-- FROM cocktail_names
-- WHERE name = 'White Russian';

-- SELECT COUNT(DISTINCT ingredient) AS total_ingredients
-- FROM (
--     SELECT ingredient1 AS ingredient FROM ingredients WHERE ingredient1 IS NOT NULL AND ingredient1 != ''
--     UNION
--     SELECT ingredient2 FROM ingredients WHERE ingredient2 IS NOT NULL AND ingredient2 != ''
--     UNION
--     SELECT ingredient3 FROM ingredients WHERE ingredient3 IS NOT NULL AND ingredient3 != ''
--     UNION
--     SELECT ingredient4 FROM ingredients WHERE ingredient4 IS NOT NULL AND ingredient4 != ''
--     UNION
--     SELECT ingredient5 FROM ingredients WHERE ingredient5 IS NOT NULL AND ingredient5 != ''
--     UNION
--     SELECT ingredient6 FROM ingredients WHERE ingredient6 IS NOT NULL AND ingredient6 != ''
--     UNION
--     SELECT ingredient7 FROM ingredients WHERE ingredient7 IS NOT NULL AND ingredient7 != ''
--     UNION
--     SELECT ingredient8 FROM ingredients WHERE ingredient8 IS NOT NULL AND ingredient8 != ''
--     UNION
--     SELECT ingredient9 FROM ingredients WHERE ingredient9 IS NOT NULL AND ingredient9 != ''
--     UNION
--     SELECT ingredient10 FROM ingredients WHERE ingredient10 IS NOT NULL AND ingredient10 != ''
--     UNION
--     SELECT ingredient11 FROM ingredients WHERE ingredient11 IS NOT NULL AND ingredient11 != ''
--     UNION
--     SELECT ingredient12 FROM ingredients WHERE ingredient12 IS NOT NULL AND ingredient12 != ''
--     UNION
--     SELECT ingredient13 FROM ingredients WHERE ingredient13 IS NOT NULL AND ingredient13 != ''
--     UNION
--     SELECT ingredient14 FROM ingredients WHERE ingredient14 IS NOT NULL AND ingredient14 != ''
--     UNION
--     SELECT ingredient15 FROM ingredients WHERE ingredient15 IS NOT NULL AND ingredient15 != ''
-- ) AS all_ingredients;

-- SELECT 
--     cocktail_names.name AS CocktailName,
--     ingredients.ingredient1,
--     ingredients.ingredient2,
--     ingredients.ingredient3,
--     ingredients.ingredient4,
--     ingredients.ingredient5,
--     ingredients.ingredient6,
--     ingredients.ingredient7,
--     ingredients.ingredient8,
--     ingredients.ingredient9,
--     ingredients.ingredient10,
--     ingredients.ingredient11,
--     ingredients.ingredient12,
--     ingredients.ingredient13,
--     ingredients.ingredient14,
--     ingredients.ingredient15
-- FROM 
--     cocktail_names
-- JOIN 
--     ingredients ON cocktail_names.id = ingredients.cocktail_id
-- WHERE 
--     cocktail_names.name = 'broadside';

-- CREATE TABLE saved_cocktail_names (
--     id INT AUTO_INCREMENT PRIMARY KEY,
--     name VARCHAR(255) NOT NULL
-- );

-- INSERT INTO saved_cocktail_names (name) VALUES ('White Russian');

-- SELECT * FROM saved_cocktail_names WHERE name = 'White Russian';

SELECT * FROM saved_cocktail_names;
-- DELETE FROM saved_cocktail_names;

-- INSERT INTO saved_cocktail_names (name) VALUES ('White Russian');

-- SELECT * FROM saved_cocktail_names WHERE name = 'White Russian';

-- SELECT * FROM saved_cocktail_names;
-- DELETE FROM saved_cocktail_names;

-- SELECT * FROM cocktail_names WHERE name = 'brandy sour';

-- CREATE TABLE measures (
--     cocktail_id VARCHAR(255),
--     measure1 VARCHAR(255),
--     measure2 VARCHAR(255),
--     measure3 VARCHAR(255),
--     measure4 VARCHAR(255),
--     measure5 VARCHAR(255),
--     measure6 VARCHAR(255),
--     measure7 VARCHAR(255),
--     measure8 VARCHAR(255),
--     measure9 VARCHAR(255),
--     measure10 VARCHAR(255),
--     measure11 VARCHAR(255),
--     measure12 VARCHAR(255),
--     measure13 VARCHAR(255),
--     measure14 VARCHAR(255),
--     measure15 VARCHAR(255),
--     PRIMARY KEY (cocktail_id)
-- );

-- select * from measures;

-- SELECT 
--     m.measure1,
--     m.measure2,
--     m.measure3,
--     m.measure4,
--     m.measure5,
--     m.measure6,
--     m.measure7,
--     m.measure8,
--     m.measure9,
--     m.measure10,
--     m.measure11,
--     m.measure12,
--     m.measure13,
--     m.measure14,
--     m.measure15
-- FROM 
--     cocktail_names cn
-- JOIN 
--     measures m ON cn.id = m.cocktail_id
-- WHERE 
--     cn.name = 'grasshopper';

************************************************************

Potential additions by susan

USE cocktaildb;

START TRANSACTION;

ALTER TABLE cocktail_names MODIFY COLUMN name VARCHAR(255) NOT NULL;

-- foreign keys & constraints to ingredients table
ALTER TABLE ingredients 
    ADD CONSTRAINT fk_cocktail_ingr FOREIGN KEY (cocktail_id) 
    REFERENCES cocktail_names (id) ON DELETE CASCADE;

-- foreign keys & constraints to instructions table
ALTER TABLE instructions 
    ADD CONSTRAINT fk_cocktail_instructions FOREIGN KEY (cocktail_id) 
    REFERENCES cocktail_names (id) ON DELETE CASCADE;

-- foreign keys & constraints to images table
ALTER TABLE images 
    ADD CONSTRAINT fk_cocktail_img FOREIGN KEY (cocktail_id) 
    REFERENCES cocktail_names (id) ON DELETE CASCADE;

-- foreign keys & constraints to videos table
ALTER TABLE videos 
    ADD CONSTRAINT fk_cocktail_vid FOREIGN KEY (cocktail_id) 
    REFERENCES cocktail_names (id) ON DELETE CASCADE;

-- foreign keys & constraints to drinks_information table
ALTER TABLE drinks_information 
    ADD CONSTRAINT fk_cocktail_drink_info FOREIGN KEY (id) 
    REFERENCES cocktail_names (id) ON DELETE CASCADE;

-- foreign keys & constraints to glass_type table
ALTER TABLE glass_type 
    ADD CONSTRAINT fk_cocktails_glass_type FOREIGN KEY (cocktail_id) 
    REFERENCES cocktail_names (id) ON DELETE CASCADE;

-- foreign keys & constraints to alcoholic_status table
ALTER TABLE alcoholic_status 
    ADD CONSTRAINT fk_cocktails_alcoholic_status FOREIGN KEY (cocktail_id) 
    REFERENCES cocktail_names (id) ON DELETE CASCADE;

-- foreign keys & constraints to measures table
ALTER TABLE measures 
    ADD CONSTRAINT fk_cocktail_measures FOREIGN KEY (cocktail_id) 
    REFERENCES cocktail_names (id) ON DELETE CASCADE;

-- check saved_cocktails table exists
CREATE TABLE IF NOT EXISTS saved_cocktails (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255)
);

COMMIT;

-- in case of any error
-- rollback will occur automatically if any statement fails before 'commit'
ROLLBACK;
